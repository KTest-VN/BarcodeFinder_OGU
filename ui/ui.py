#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.4
#  in conjunction with Tcl version 8.6
#    May 16, 2022 10:52:23 AM CST  platform: Darwin

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *

import ui_support

class main:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#edf0f3'  # Closest X11 color: 'gray94'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        _tabfg1 = 'black' 
        _tabfg2 = 'black' 
        _tabbg1 = 'grey75' 
        _tabbg2 = 'grey89' 
        _bgmode = 'light' 

        top.geometry("800x451+1875+33")
        top.minsize(120, 15)
        top.maxsize(2564, 1421)
        top.resizable(1,  1)
        top.title("BarcodeFinder")
        top.configure(background="#edf0f3")
        top.configure(highlightbackground="#edf0f3")
        top.configure(highlightcolor="black")

        self.top = top

        self.help_b = tk.Button(self.top)
        self.help_b.place(relx=0.913, rely=0.067, height=40, width=40)
        self.help_b.configure(activebackground="#ececec")
        self.help_b.configure(activeforeground="#000000")
        self.help_b.configure(background="#edf0f3")
        self.help_b.configure(borderwidth="1")
        self.help_b.configure(command=ui_support.run_help)
        self.help_b.configure(foreground="#000000")
        self.help_b.configure(highlightbackground="#edf0f3")
        self.help_b.configure(highlightcolor="black")
        photo_location = "./button4.png"
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        self.help_b.configure(image=_img0)
        self.help_b.configure(pady="0")
        self.help_b.configure(text='''Button''')

        self.gb2fasta_b = tk.Button(self.top)
        self.gb2fasta_b.place(relx=0.188, rely=0.288, height=100, width=100)
        self.gb2fasta_b.configure(activebackground="#ececec")
        self.gb2fasta_b.configure(activeforeground="#000000")
        self.gb2fasta_b.configure(background="#edf0f3")
        self.gb2fasta_b.configure(borderwidth="0")
        self.gb2fasta_b.configure(command=ui_support.run_gb2fasta)
        self.gb2fasta_b.configure(foreground="#000000")
        self.gb2fasta_b.configure(highlightbackground="#edf0f3")
        self.gb2fasta_b.configure(highlightcolor="black")
        photo_location = "./button1.png"
        global _img1
        _img1 = tk.PhotoImage(file=photo_location)
        self.gb2fasta_b.configure(image=_img1)
        self.gb2fasta_b.configure(pady="0")
        self.gb2fasta_b.configure(text='''Button''')

        self.evaluate_b = tk.Button(self.top)
        self.evaluate_b.place(relx=0.438, rely=0.288, height=100, width=100)
        self.evaluate_b.configure(activebackground="#ececec")
        self.evaluate_b.configure(activeforeground="#000000")
        self.evaluate_b.configure(background="#edf0f3")
        self.evaluate_b.configure(borderwidth="0")
        self.evaluate_b.configure(command=ui_support.run_evaluate)
        self.evaluate_b.configure(foreground="#000000")
        self.evaluate_b.configure(highlightbackground="#edf0f3")
        self.evaluate_b.configure(highlightcolor="black")
        photo_location = "./button2.png"
        global _img2
        _img2 = tk.PhotoImage(file=photo_location)
        self.evaluate_b.configure(image=_img2)
        self.evaluate_b.configure(pady="0")
        self.evaluate_b.configure(text='''Button''')

        self.primer_b = tk.Button(self.top)
        self.primer_b.place(relx=0.688, rely=0.288, height=100, width=100)
        self.primer_b.configure(activebackground="#ececec")
        self.primer_b.configure(activeforeground="#000000")
        self.primer_b.configure(background="#edf0f3")
        self.primer_b.configure(borderwidth="0")
        self.primer_b.configure(command=ui_support.run_primer)
        self.primer_b.configure(foreground="#000000")
        self.primer_b.configure(highlightbackground="#edf0f3")
        self.primer_b.configure(highlightcolor="black")
        photo_location = "./button3.png"
        global _img3
        _img3 = tk.PhotoImage(file=photo_location)
        self.primer_b.configure(image=_img3)
        self.primer_b.configure(pady="0")
        self.primer_b.configure(text='''Button''')

        self.Button2 = tk.Button(self.top)
        self.Button2.place(relx=0.713, rely=0.865, height=30, width=200)
        self.Button2.configure(activebackground="#ececec")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#edf0f3")
        self.Button2.configure(borderwidth="1")
        self.Button2.configure(compound='left')
        self.Button2.configure(font="-family {TkDefaultFont} -size 14")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#edf0f3")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Install third-party software''')

        self.Label1 = tk.Label(self.top)
        self.Label1.place(relx=0.188, rely=0.532, height=30, width=100)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(anchor='w')
        self.Label1.configure(background="#edf0f3")
        self.Label1.configure(compound='left')
        self.Label1.configure(font="-family {Arial} -size 20")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#edf0f3")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''GB2Fasta''')

        self.Label1_2 = tk.Label(self.top)
        self.Label1_2.place(relx=0.45, rely=0.532, height=30, width=100)
        self.Label1_2.configure(activebackground="#f9f9f9")
        self.Label1_2.configure(anchor='w')
        self.Label1_2.configure(background="#edf0f3")
        self.Label1_2.configure(compound='left')
        self.Label1_2.configure(font="-family {Arial} -size 20")
        self.Label1_2.configure(foreground="#000000")
        self.Label1_2.configure(highlightbackground="#edf0f3")
        self.Label1_2.configure(highlightcolor="black")
        self.Label1_2.configure(text='''Evaluate''')

        self.Label1_2_1 = tk.Label(self.top)
        self.Label1_2_1.place(relx=0.713, rely=0.532, height=30, width=100)
        self.Label1_2_1.configure(activebackground="#f9f9f9")
        self.Label1_2_1.configure(anchor='w')
        self.Label1_2_1.configure(background="#edf0f3")
        self.Label1_2_1.configure(compound='left')
        self.Label1_2_1.configure(font="-family {Arial} -size 20")
        self.Label1_2_1.configure(foreground="#000000")
        self.Label1_2_1.configure(highlightbackground="#edf0f3")
        self.Label1_2_1.configure(highlightcolor="black")
        self.Label1_2_1.configure(text='''Primer''')

        self.Label2 = tk.Label(self.top)
        self.Label2.place(relx=0.35, rely=0.643, height=35, width=252)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(anchor='w')
        self.Label2.configure(background="#edf0f3")
        self.Label2.configure(compound='left')
        self.Label2.configure(font="-family {Arial} -size 20")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#edf0f3")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Click button to run modules''')

class gb2fasta:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#edf0f3'  # Closest X11 color: 'gray94'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        _tabfg1 = 'black' 
        _tabfg2 = 'black' 
        _tabbg1 = 'grey75' 
        _tabbg2 = 'grey89' 
        _bgmode = 'light' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("600x800+2061+252")
        top.minsize(120, 15)
        top.maxsize(2564, 1421)
        top.resizable(1,  1)
        top.title("GB2Fasta")
        top.configure(background="#edf0f3")
        top.configure(highlightbackground="#edf0f3")
        top.configure(highlightcolor="black")

        self.top = top
        self.gb = tk.StringVar()
        self.gene = tk.StringVar()
        self.molecular = tk.StringVar()
        self.group = tk.StringVar()
        self.og = tk.StringVar()
        self.refseq = tk.StringVar()
        self.count = tk.StringVar()
        self.min_len = tk.StringVar()
        self.max_len = tk.StringVar()
        self.date_start = tk.StringVar()
        self.date_end = tk.StringVar()
        self.exclude = tk.StringVar()
        self.query = tk.StringVar()
        self.taxon = tk.StringVar()
        self.out = tk.StringVar()
        self.expand = tk.StringVar()
        self.max_name_len = tk.StringVar()
        self.max_gene_len = tk.StringVar()
        self.unique = tk.StringVar()
        self.allow_repeat = tk.IntVar()
        self.allow_invert_repeat = tk.IntVar()
        self.allow_mosaic_repeat = tk.IntVar()
        self.no_divide = tk.IntVar()
        self.rename = tk.IntVar()

        self.Labelframe1 = tk.LabelFrame(self.top)
        self.Labelframe1.place(relx=0.025, rely=0.013, relheight=0.46
                , relwidth=0.955)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(font="-family {TkDefaultFont} -size 14")
        self.Labelframe1.configure(foreground="#000000")
        self.Labelframe1.configure(text='''Input''')
        self.Labelframe1.configure(background="#edf0f3")
        self.Labelframe1.configure(highlightbackground="#edf0f3")
        self.Labelframe1.configure(highlightcolor="black")

        self.TLabel1 = tk.Label(self.Labelframe1)
        self.TLabel1.place(relx=0.052, rely=0.057, height=35, width=90
                , bordermode='ignore')
        self.TLabel1.configure(activebackground="#f9f9f9")
        self.TLabel1.configure(activeforeground="black")
        self.TLabel1.configure(anchor='w')
        self.TLabel1.configure(background="#edf0f3")
        self.TLabel1.configure(compound='left')
        self.TLabel1.configure(font="-family {TkDefaultFont} -size 12")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(highlightbackground="#edf0f3")
        self.TLabel1.configure(highlightcolor="black")
        self.TLabel1.configure(justify='left')
        self.TLabel1.configure(text='''Genbank files''')

        self.gb_file = ttk.Entry(self.Labelframe1)
        self.gb_file.place(relx=0.241, rely=0.057, relheight=0.095
                , relwidth=0.562, bordermode='ignore')
        self.gb_file.configure(textvariable=self.gb)
        self.gb_file.configure(takefocus="")
        self.gb_file.configure(cursor="fleur")
        self.tooltip_font = "TkDefaultFont"
        self.gb_file_tooltip = \
        ToolTip(self.gb_file, self.tooltip_font, '''gb format files''')

        self.TSeparator1 = ttk.Separator(self.Labelframe1)
        self.TSeparator1.place(relx=0.002, rely=0.171, relwidth=0.995
                , bordermode='ignore')

        self.TLabel1 = tk.Label(self.Labelframe1)
        self.TLabel1.place(relx=0.035, rely=0.217, height=35, width=60
                , bordermode='ignore')
        self.TLabel1.configure(activebackground="#f9f9f9")
        self.TLabel1.configure(activeforeground="black")
        self.TLabel1.configure(anchor='w')
        self.TLabel1.configure(background="#edf0f3")
        self.TLabel1.configure(compound='left')
        self.TLabel1.configure(font="-family {TkDefaultFont} -size 12")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(highlightbackground="#edf0f3")
        self.TLabel1.configure(highlightcolor="black")
        self.TLabel1.configure(justify='left')
        self.TLabel1.configure(text='''Gene''')

        self.gene = ttk.Entry(self.Labelframe1)
        self.gene.place(relx=0.201, rely=0.217, relheight=0.095, relwidth=0.314
                , bordermode='ignore')
        self.gene.configure(textvariable=self.gene)
        self.gene.configure(takefocus="")
        self.gene.configure(cursor="fleur")
        self.tooltip_font = "TkDefaultFont"
        self.gene_tooltip = \
        ToolTip(self.gene, self.tooltip_font, '''gene name''')

        self.TSeparator1 = ttk.Separator(self.Labelframe1)
        self.TSeparator1.place(relx=0.524, rely=0.19, relheight=0.541
                , bordermode='ignore')
        self.TSeparator1.configure(orient="vertical")

        self.TLabel1_1 = tk.Label(self.Labelframe1)
        self.TLabel1_1.place(relx=0.035, rely=0.326, height=35, width=70
                , bordermode='ignore')
        self.TLabel1_1.configure(activebackground="#f9f9f9")
        self.TLabel1_1.configure(activeforeground="black")
        self.TLabel1_1.configure(anchor='w')
        self.TLabel1_1.configure(background="#edf0f3")
        self.TLabel1_1.configure(compound='left')
        self.TLabel1_1.configure(font="-family {TkDefaultFont} -size 12")
        self.TLabel1_1.configure(foreground="#000000")
        self.TLabel1_1.configure(highlightbackground="#edf0f3")
        self.TLabel1_1.configure(highlightcolor="black")
        self.TLabel1_1.configure(justify='left')
        self.TLabel1_1.configure(text='''Taxonomy''')

        self.TLabel1_2 = tk.Label(self.Labelframe1)
        self.TLabel1_2.place(relx=0.558, rely=0.217, height=35, width=60
                , bordermode='ignore')
        self.TLabel1_2.configure(activebackground="#f9f9f9")
        self.TLabel1_2.configure(activeforeground="black")
        self.TLabel1_2.configure(anchor='w')
        self.TLabel1_2.configure(background="#edf0f3")
        self.TLabel1_2.configure(compound='left')
        self.TLabel1_2.configure(font="-family {TkDefaultFont} -size 12")
        self.TLabel1_2.configure(foreground="#000000")
        self.TLabel1_2.configure(highlightbackground="#edf0f3")
        self.TLabel1_2.configure(highlightcolor="black")
        self.TLabel1_2.configure(justify='left')
        self.TLabel1_2.configure(text='''Molecular''')

        self.TCombobox1 = ttk.Combobox(self.Labelframe1)
        self.TCombobox1.place(relx=0.719, rely=0.217, relheight=0.095
                , relwidth=0.257, bordermode='ignore')
        self.value_list = ['all','DNA','RNA',]
        self.TCombobox1.configure(values=self.value_list)
        self.TCombobox1.configure(textvariable=self.molecular)
        self.TCombobox1.configure(takefocus="")

        self.TLabel1_2_1 = tk.Label(self.Labelframe1)
        self.TLabel1_2_1.place(relx=0.558, rely=0.326, height=35, width=60
                , bordermode='ignore')
        self.TLabel1_2_1.configure(activebackground="#f9f9f9")
        self.TLabel1_2_1.configure(activeforeground="black")
        self.TLabel1_2_1.configure(anchor='w')
        self.TLabel1_2_1.configure(background="#edf0f3")
        self.TLabel1_2_1.configure(compound='left')
        self.TLabel1_2_1.configure(font="-family {TkDefaultFont} -size 12")
        self.TLabel1_2_1.configure(foreground="#000000")
        self.TLabel1_2_1.configure(highlightbackground="#edf0f3")
        self.TLabel1_2_1.configure(highlightcolor="black")
        self.TLabel1_2_1.configure(justify='left')
        self.TLabel1_2_1.configure(text='''Group''')

        self.TCombobox1_1 = ttk.Combobox(self.Labelframe1)
        self.TCombobox1_1.place(relx=0.719, rely=0.326, relheight=0.095
                , relwidth=0.257, bordermode='ignore')
        self.value_list = ['all','animals','plants','fungi','protists','bacteria','archaea','viruses',]
        self.TCombobox1_1.configure(values=self.value_list)
        self.TCombobox1_1.configure(textvariable=self.group)
        self.TCombobox1_1.configure(takefocus="")

        self.TLabel1_1_1 = tk.Label(self.Labelframe1)
        self.TLabel1_1_1.place(relx=0.035, rely=0.435, height=35, width=60
                , bordermode='ignore')
        self.TLabel1_1_1.configure(activebackground="#f9f9f9")
        self.TLabel1_1_1.configure(activeforeground="black")
        self.TLabel1_1_1.configure(anchor='w')
        self.TLabel1_1_1.configure(background="#edf0f3")
        self.TLabel1_1_1.configure(compound='left')
        self.TLabel1_1_1.configure(font="-family {TkDefaultFont} -size 12")
        self.TLabel1_1_1.configure(foreground="#000000")
        self.TLabel1_1_1.configure(highlightbackground="#edf0f3")
        self.TLabel1_1_1.configure(highlightcolor="black")
        self.TLabel1_1_1.configure(justify='left')
        self.TLabel1_1_1.configure(text='''Organelle''')

        self.og = ttk.Combobox(self.Labelframe1)
        self.og.place(relx=0.201, rely=0.435, relheight=0.095, relwidth=0.314
                , bordermode='ignore')
        self.value_list = ['ignore','both','no','mitochondrion','chloroplast',]
        self.og.configure(values=self.value_list)
        self.og.configure(textvariable=self.og)
        self.og.configure(takefocus="")

        self.TLabel1_1_1_1 = tk.Label(self.Labelframe1)
        self.TLabel1_1_1_1.place(relx=0.035, rely=0.541, height=35, width=60
                , bordermode='ignore')
        self.TLabel1_1_1_1.configure(activebackground="#f9f9f9")
        self.TLabel1_1_1_1.configure(activeforeground="black")
        self.TLabel1_1_1_1.configure(anchor='w')
        self.TLabel1_1_1_1.configure(background="#edf0f3")
        self.TLabel1_1_1_1.configure(compound='left')
        self.TLabel1_1_1_1.configure(font="-family {TkDefaultFont} -size 12")
        self.TLabel1_1_1_1.configure(foreground="#000000")
        self.TLabel1_1_1_1.configure(highlightbackground="#edf0f3")
        self.TLabel1_1_1_1.configure(highlightcolor="black")
        self.TLabel1_1_1_1.configure(justify='left')
        self.TLabel1_1_1_1.configure(text='''RefSeq''')

        self.refseq = ttk.Combobox(self.Labelframe1)
        self.refseq.place(relx=0.201, rely=0.541, relheight=0.095, relwidth=0.314
                , bordermode='ignore')
        self.value_list = ['both','yes','no',]
        self.refseq.configure(values=self.value_list)
        self.refseq.configure(textvariable=self.refseq)
        self.refseq.configure(takefocus="")
        self.tooltip_font = "TkDefaultFont"
        self.refseq_tooltip = \
        ToolTip(self.refseq, self.tooltip_font, '''Use RefSeq or not''')

        self.TLabel1_1_1_1_1 = tk.Label(self.Labelframe1)
        self.TLabel1_1_1_1_1.place(relx=0.035, rely=0.649, height=35, width=60
                , bordermode='ignore')
        self.TLabel1_1_1_1_1.configure(activebackground="#f9f9f9")
        self.TLabel1_1_1_1_1.configure(activeforeground="black")
        self.TLabel1_1_1_1_1.configure(anchor='w')
        self.TLabel1_1_1_1_1.configure(background="#edf0f3")
        self.TLabel1_1_1_1_1.configure(compound='left')
        self.TLabel1_1_1_1_1.configure(font="-family {TkDefaultFont} -size 12")
        self.TLabel1_1_1_1_1.configure(foreground="#000000")
        self.TLabel1_1_1_1_1.configure(highlightbackground="#edf0f3")
        self.TLabel1_1_1_1_1.configure(highlightcolor="black")
        self.TLabel1_1_1_1_1.configure(justify='left')
        self.TLabel1_1_1_1_1.configure(text='''Count''')

        self.TEntry1 = ttk.Entry(self.Labelframe1)
        self.TEntry1.place(relx=0.201, rely=0.649, relheight=0.095
                , relwidth=0.314, bordermode='ignore')
        self.TEntry1.configure(textvariable=self.count)
        self.TEntry1.configure(takefocus="")
        self.TEntry1.configure(cursor="fleur")
        self.tooltip_font = "TkDefaultFont"
        self.TEntry1_tooltip = \
        ToolTip(self.TEntry1, self.tooltip_font, '''numbers of sequences to download''')

        self.TLabel1_2_1_1 = tk.Label(self.Labelframe1)
        self.TLabel1_2_1_1.place(relx=0.558, rely=0.435, height=35, width=60
                , bordermode='ignore')
        self.TLabel1_2_1_1.configure(activebackground="#f9f9f9")
        self.TLabel1_2_1_1.configure(activeforeground="black")
        self.TLabel1_2_1_1.configure(anchor='w')
        self.TLabel1_2_1_1.configure(background="#edf0f3")
        self.TLabel1_2_1_1.configure(compound='left')
        self.TLabel1_2_1_1.configure(font="-family {TkDefaultFont} -size 12")
        self.TLabel1_2_1_1.configure(foreground="#000000")
        self.TLabel1_2_1_1.configure(highlightbackground="#edf0f3")
        self.TLabel1_2_1_1.configure(highlightcolor="black")
        self.TLabel1_2_1_1.configure(justify='left')
        self.TLabel1_2_1_1.configure(text='''Length''')

        self.gb_file_1_2 = ttk.Entry(self.Labelframe1)
        self.gb_file_1_2.place(relx=0.686, rely=0.435, relheight=0.095
                , relwidth=0.087, bordermode='ignore')
        self.gb_file_1_2.configure(textvariable=self.min_len)
        self.gb_file_1_2.configure(takefocus="")
        self.gb_file_1_2.configure(cursor="fleur")

        self.Label1 = tk.Label(self.Labelframe1)
        self.Label1.place(relx=0.785, rely=0.435, height=35, width=36
                , bordermode='ignore')
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="SystemButtonText")
        self.Label1.configure(anchor='w')
        self.Label1.configure(background="#edf0f3")
        self.Label1.configure(compound='left')
        self.Label1.configure(font="-family {TkDefaultFont} -size 13")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#edf0f3")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''to''')

        self.gb_file_1_2_1 = ttk.Entry(self.Labelframe1)
        self.gb_file_1_2_1.place(relx=0.839, rely=0.435, relheight=0.095
                , relwidth=0.14, bordermode='ignore')
        self.gb_file_1_2_1.configure(textvariable=self.max_len)
        self.gb_file_1_2_1.configure(takefocus="")
        self.gb_file_1_2_1.configure(cursor="fleur")

        self.TLabel1_2_1_1_1 = tk.Label(self.Labelframe1)
        self.TLabel1_2_1_1_1.place(relx=0.558, rely=0.541, height=35, width=60
                , bordermode='ignore')
        self.TLabel1_2_1_1_1.configure(activebackground="#f9f9f9")
        self.TLabel1_2_1_1_1.configure(activeforeground="black")
        self.TLabel1_2_1_1_1.configure(anchor='w')
        self.TLabel1_2_1_1_1.configure(background="#edf0f3")
        self.TLabel1_2_1_1_1.configure(compound='left')
        self.TLabel1_2_1_1_1.configure(font="-family {TkDefaultFont} -size 12")
        self.TLabel1_2_1_1_1.configure(foreground="#000000")
        self.TLabel1_2_1_1_1.configure(highlightbackground="#edf0f3")
        self.TLabel1_2_1_1_1.configure(highlightcolor="black")
        self.TLabel1_2_1_1_1.configure(justify='left')
        self.TLabel1_2_1_1_1.configure(text='''Date''')

        self.gb_file_1_2_2 = ttk.Entry(self.Labelframe1)
        self.gb_file_1_2_2.place(relx=0.686, rely=0.541, relheight=0.095
                , relwidth=0.087, bordermode='ignore')
        self.gb_file_1_2_2.configure(textvariable=self.date_start)
        self.gb_file_1_2_2.configure(takefocus="")
        self.gb_file_1_2_2.configure(cursor="fleur")
        self.tooltip_font = "TkDefaultFont"
        self.gb_file_1_2_2_tooltip = \
        ToolTip(self.gb_file_1_2_2, self.tooltip_font, '''1970/1/1''')

        self.Label1_1 = tk.Label(self.Labelframe1)
        self.Label1_1.place(relx=0.789, rely=0.541, height=35, width=36
                , bordermode='ignore')
        self.Label1_1.configure(activebackground="#f9f9f9")
        self.Label1_1.configure(activeforeground="SystemButtonText")
        self.Label1_1.configure(anchor='w')
        self.Label1_1.configure(background="#edf0f3")
        self.Label1_1.configure(compound='left')
        self.Label1_1.configure(font="-family {TkDefaultFont} -size 13")
        self.Label1_1.configure(foreground="#000000")
        self.Label1_1.configure(highlightbackground="#edf0f3")
        self.Label1_1.configure(highlightcolor="black")
        self.Label1_1.configure(text='''to''')

        self.gb_file_1_2_1_1 = ttk.Entry(self.Labelframe1)
        self.gb_file_1_2_1_1.place(relx=0.839, rely=0.541, relheight=0.095
                , relwidth=0.136, bordermode='ignore')
        self.gb_file_1_2_1_1.configure(textvariable=self.date_end)
        self.gb_file_1_2_1_1.configure(takefocus="")
        self.gb_file_1_2_1_1.configure(cursor="fleur")
        self.tooltip_font = "TkDefaultFont"
        self.gb_file_1_2_1_1_tooltip = \
        ToolTip(self.gb_file_1_2_1_1, self.tooltip_font, '''2022/12/31''')

        self.TLabel1_1_1_1_1_1 = tk.Label(self.Labelframe1)
        self.TLabel1_1_1_1_1_1.place(relx=0.558, rely=0.649, height=35, width=60
                , bordermode='ignore')
        self.TLabel1_1_1_1_1_1.configure(activebackground="#f9f9f9")
        self.TLabel1_1_1_1_1_1.configure(activeforeground="black")
        self.TLabel1_1_1_1_1_1.configure(anchor='w')
        self.TLabel1_1_1_1_1_1.configure(background="#edf0f3")
        self.TLabel1_1_1_1_1_1.configure(compound='left')
        self.TLabel1_1_1_1_1_1.configure(font="-family {TkDefaultFont} -size 12")
        self.TLabel1_1_1_1_1_1.configure(foreground="#000000")
        self.TLabel1_1_1_1_1_1.configure(highlightbackground="#edf0f3")
        self.TLabel1_1_1_1_1_1.configure(highlightcolor="black")
        self.TLabel1_1_1_1_1_1.configure(justify='left')
        self.TLabel1_1_1_1_1_1.configure(text='''Exclude''')

        self.gb_file_1_2_2_1 = ttk.Entry(self.Labelframe1)
        self.gb_file_1_2_2_1.place(relx=0.686, rely=0.649, relheight=0.095
                , relwidth=0.279, bordermode='ignore')
        self.gb_file_1_2_2_1.configure(textvariable=self.exclude)
        self.gb_file_1_2_2_1.configure(takefocus="")
        self.gb_file_1_2_2_1.configure(cursor="fleur")
        self.tooltip_font = "TkDefaultFont"
        self.gb_file_1_2_2_1_tooltip = \
        ToolTip(self.gb_file_1_2_2_1, self.tooltip_font, '''1970/1/1''')

        self.TLabel1_1_1_1_1_2 = tk.Label(self.Labelframe1)
        self.TLabel1_1_1_1_1_2.place(relx=0.035, rely=0.813, height=35, width=60
                , bordermode='ignore')
        self.TLabel1_1_1_1_1_2.configure(activebackground="#f9f9f9")
        self.TLabel1_1_1_1_1_2.configure(activeforeground="black")
        self.TLabel1_1_1_1_1_2.configure(anchor='w')
        self.TLabel1_1_1_1_1_2.configure(background="#edf0f3")
        self.TLabel1_1_1_1_1_2.configure(compound='left')
        self.TLabel1_1_1_1_1_2.configure(font="-family {TkDefaultFont} -size 12")
        self.TLabel1_1_1_1_1_2.configure(foreground="#000000")
        self.TLabel1_1_1_1_1_2.configure(highlightbackground="#edf0f3")
        self.TLabel1_1_1_1_1_2.configure(highlightcolor="black")
        self.TLabel1_1_1_1_1_2.configure(justify='left')
        self.TLabel1_1_1_1_1_2.configure(text='''Query''')

        self.TEntry1 = ttk.Entry(self.Labelframe1)
        self.TEntry1.place(relx=0.201, rely=0.813, relheight=0.095
                , relwidth=0.785, bordermode='ignore')
        self.TEntry1.configure(textvariable=self.query)
        self.TEntry1.configure(takefocus="")
        self.TEntry1.configure(cursor="fleur")
        self.tooltip_font = "TkDefaultFont"
        self.TEntry1_tooltip = \
        ToolTip(self.TEntry1, self.tooltip_font, '''Entrez query string''')

        self.Button1 = tk.Button(self.Labelframe1)
        self.Button1.place(relx=0.82, rely=0.054, height=35, width=90
                , bordermode='ignore')
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#edf0f3")
        self.Button1.configure(command=ui_support.open_file)
        self.Button1.configure(compound='left')
        self.Button1.configure(font="-family {TkDefaultFont} -size 12")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#edf0f3")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Open''')

        self.taxon = ttk.Entry(self.Labelframe1)
        self.taxon.place(relx=0.201, rely=0.326, relheight=0.095, relwidth=0.314
                , bordermode='ignore')
        self.taxon.configure(textvariable=self.taxon)
        self.taxon.configure(takefocus="")
        self.taxon.configure(cursor="fleur")

        self.TLabel1_1_1_1_1_2_1 = tk.Label(self.top)
        self.TLabel1_1_1_1_1_2_1.place(relx=0.05, rely=0.563, height=36
                , width=60)
        self.TLabel1_1_1_1_1_2_1.configure(activebackground="#f9f9f9")
        self.TLabel1_1_1_1_1_2_1.configure(activeforeground="black")
        self.TLabel1_1_1_1_1_2_1.configure(anchor='w')
        self.TLabel1_1_1_1_1_2_1.configure(background="#edf0f3")
        self.TLabel1_1_1_1_1_2_1.configure(compound='left')
        self.TLabel1_1_1_1_1_2_1.configure(font="-family {TkDefaultFont} -size 12")
        self.TLabel1_1_1_1_1_2_1.configure(foreground="#000000")
        self.TLabel1_1_1_1_1_2_1.configure(highlightbackground="#edf0f3")
        self.TLabel1_1_1_1_1_2_1.configure(highlightcolor="black")
        self.TLabel1_1_1_1_1_2_1.configure(justify='left')
        self.TLabel1_1_1_1_1_2_1.configure(text='''Output''')

        self.gb_file_2 = ttk.Entry(self.top)
        self.gb_file_2.place(relx=0.167, rely=0.563, relheight=0.045
                , relwidth=0.633)
        self.gb_file_2.configure(textvariable=self.out)
        self.gb_file_2.configure(takefocus="")
        self.gb_file_2.configure(cursor="fleur")
        self.tooltip_font = "TkDefaultFont"
        self.gb_file_2_tooltip = \
        ToolTip(self.gb_file_2, self.tooltip_font, '''output folder''')

        self.Labelframe1 = tk.LabelFrame(self.top)
        self.Labelframe1.place(relx=0.025, rely=0.65, relheight=0.176
                , relwidth=0.955)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(font="-family {TkDefaultFont} -size 14")
        self.Labelframe1.configure(foreground="#000000")
        self.Labelframe1.configure(text='''Advance''')
        self.Labelframe1.configure(background="#edf0f3")
        self.Labelframe1.configure(highlightbackground="#edf0f3")
        self.Labelframe1.configure(highlightcolor="black")

        self.Checkbutton1_1_1 = tk.Checkbutton(self.Labelframe1)
        self.Checkbutton1_1_1.place(relx=0.576, rely=0.142, relheight=0.248
                , relwidth=0.276, bordermode='ignore')
        self.Checkbutton1_1_1.configure(activebackground="#ececec")
        self.Checkbutton1_1_1.configure(activeforeground="#000000")
        self.Checkbutton1_1_1.configure(anchor='w')
        self.Checkbutton1_1_1.configure(background="#edf0f3")
        self.Checkbutton1_1_1.configure(compound='left')
        self.Checkbutton1_1_1.configure(font="-family {TkDefaultFont} -size 12")
        self.Checkbutton1_1_1.configure(foreground="#000000")
        self.Checkbutton1_1_1.configure(highlightbackground="#edf0f3")
        self.Checkbutton1_1_1.configure(highlightcolor="black")
        self.Checkbutton1_1_1.configure(justify='left')
        self.Checkbutton1_1_1.configure(selectcolor="#d9d9d9")
        self.Checkbutton1_1_1.configure(text='''Allow repeat''')
        self.Checkbutton1_1_1.configure(variable=self.allow_repeat)

        self.Checkbutton1_1_1_1 = tk.Checkbutton(self.Labelframe1)
        self.Checkbutton1_1_1_1.place(relx=0.576, rely=0.709, relheight=0.248
                , relwidth=0.361, bordermode='ignore')
        self.Checkbutton1_1_1_1.configure(activebackground="#ececec")
        self.Checkbutton1_1_1_1.configure(activeforeground="#000000")
        self.Checkbutton1_1_1_1.configure(anchor='w')
        self.Checkbutton1_1_1_1.configure(background="#edf0f3")
        self.Checkbutton1_1_1_1.configure(compound='left')
        self.Checkbutton1_1_1_1.configure(font="-family {TkDefaultFont} -size 12")
        self.Checkbutton1_1_1_1.configure(foreground="#000000")
        self.Checkbutton1_1_1_1.configure(highlightbackground="#edf0f3")
        self.Checkbutton1_1_1_1.configure(highlightcolor="black")
        self.Checkbutton1_1_1_1.configure(justify='left')
        self.Checkbutton1_1_1_1.configure(selectcolor="#d9d9d9")
        self.Checkbutton1_1_1_1.configure(text='''Allow invert repeat''')
        self.Checkbutton1_1_1_1.configure(variable=self.allow_invert_repeat)

        self.Checkbutton1_1_1_1_1 = tk.Checkbutton(self.Labelframe1)
        self.Checkbutton1_1_1_1_1.place(relx=0.576, rely=0.426, relheight=0.248
                , relwidth=0.361, bordermode='ignore')
        self.Checkbutton1_1_1_1_1.configure(activebackground="#ececec")
        self.Checkbutton1_1_1_1_1.configure(activeforeground="#000000")
        self.Checkbutton1_1_1_1_1.configure(anchor='w')
        self.Checkbutton1_1_1_1_1.configure(background="#edf0f3")
        self.Checkbutton1_1_1_1_1.configure(compound='left')
        self.Checkbutton1_1_1_1_1.configure(font="-family {TkDefaultFont} -size 12")
        self.Checkbutton1_1_1_1_1.configure(foreground="#000000")
        self.Checkbutton1_1_1_1_1.configure(highlightbackground="#edf0f3")
        self.Checkbutton1_1_1_1_1.configure(highlightcolor="black")
        self.Checkbutton1_1_1_1_1.configure(justify='left')
        self.Checkbutton1_1_1_1_1.configure(selectcolor="#d9d9d9")
        self.Checkbutton1_1_1_1_1.configure(text='''Allow mosaic repeat''')
        self.Checkbutton1_1_1_1_1.configure(variable=self.allow_mosaic_repeat)

        self.TLabel1_1_1_1_1_2_2_1 = tk.Label(self.Labelframe1)
        self.TLabel1_1_1_1_1_2_2_1.place(relx=0.175, rely=0.142, height=35
                , width=60, bordermode='ignore')
        self.TLabel1_1_1_1_1_2_2_1.configure(activebackground="#f9f9f9")
        self.TLabel1_1_1_1_1_2_2_1.configure(activeforeground="black")
        self.TLabel1_1_1_1_1_2_2_1.configure(anchor='e')
        self.TLabel1_1_1_1_1_2_2_1.configure(background="#edf0f3")
        self.TLabel1_1_1_1_1_2_2_1.configure(compound='left')
        self.TLabel1_1_1_1_1_2_2_1.configure(font="-family {TkDefaultFont} -size 12")
        self.TLabel1_1_1_1_1_2_2_1.configure(foreground="#000000")
        self.TLabel1_1_1_1_1_2_2_1.configure(highlightbackground="#edf0f3")
        self.TLabel1_1_1_1_1_2_2_1.configure(highlightcolor="black")
        self.TLabel1_1_1_1_1_2_2_1.configure(justify='left')
        self.TLabel1_1_1_1_1_2_2_1.configure(text='''Expand''')

        self.gb_file_1_2_1_1_1 = ttk.Entry(self.Labelframe1)
        self.gb_file_1_2_1_1_1.place(relx=0.297, rely=0.142, relheight=0.248
                , relwidth=0.187, bordermode='ignore')
        self.gb_file_1_2_1_1_1.configure(textvariable=self.expand)
        self.gb_file_1_2_1_1_1.configure(takefocus="")
        self.gb_file_1_2_1_1_1.configure(cursor="fleur")
        self.tooltip_font = "TkDefaultFont"
        self.gb_file_1_2_1_1_1_tooltip = \
        ToolTip(self.gb_file_1_2_1_1_1, self.tooltip_font, '''expand for primer design''')

        self.TLabel1_1_1_1_1_2_2_1_1 = tk.Label(self.Labelframe1)
        self.TLabel1_1_1_1_1_2_2_1_1.place(relx=0.07, rely=0.426, height=35
                , width=120, bordermode='ignore')
        self.TLabel1_1_1_1_1_2_2_1_1.configure(activebackground="#f9f9f9")
        self.TLabel1_1_1_1_1_2_2_1_1.configure(activeforeground="black")
        self.TLabel1_1_1_1_1_2_2_1_1.configure(anchor='e')
        self.TLabel1_1_1_1_1_2_2_1_1.configure(background="#edf0f3")
        self.TLabel1_1_1_1_1_2_2_1_1.configure(compound='left')
        self.TLabel1_1_1_1_1_2_2_1_1.configure(font="-family {TkDefaultFont} -size 12")
        self.TLabel1_1_1_1_1_2_2_1_1.configure(foreground="#000000")
        self.TLabel1_1_1_1_1_2_2_1_1.configure(highlightbackground="#edf0f3")
        self.TLabel1_1_1_1_1_2_2_1_1.configure(highlightcolor="black")
        self.TLabel1_1_1_1_1_2_2_1_1.configure(justify='left')
        self.TLabel1_1_1_1_1_2_2_1_1.configure(text='''Max name length''')

        self.TLabel1_1_1_1_1_2_2_1_1_1 = tk.Label(self.Labelframe1)
        self.TLabel1_1_1_1_1_2_2_1_1_1.place(relx=0.052, rely=0.709, height=35
                , width=130, bordermode='ignore')
        self.TLabel1_1_1_1_1_2_2_1_1_1.configure(activebackground="#f9f9f9")
        self.TLabel1_1_1_1_1_2_2_1_1_1.configure(activeforeground="black")
        self.TLabel1_1_1_1_1_2_2_1_1_1.configure(anchor='e')
        self.TLabel1_1_1_1_1_2_2_1_1_1.configure(background="#edf0f3")
        self.TLabel1_1_1_1_1_2_2_1_1_1.configure(compound='left')
        self.TLabel1_1_1_1_1_2_2_1_1_1.configure(font="-family {TkDefaultFont} -size 12")
        self.TLabel1_1_1_1_1_2_2_1_1_1.configure(foreground="#000000")
        self.TLabel1_1_1_1_1_2_2_1_1_1.configure(highlightbackground="#edf0f3")
        self.TLabel1_1_1_1_1_2_2_1_1_1.configure(highlightcolor="black")
        self.TLabel1_1_1_1_1_2_2_1_1_1.configure(justify='left')
        self.TLabel1_1_1_1_1_2_2_1_1_1.configure(text='''Max fragment length''')

        self.gb_file_1_2_1_1_1_1 = ttk.Entry(self.Labelframe1)
        self.gb_file_1_2_1_1_1_1.place(relx=0.297, rely=0.426, relheight=0.248
                , relwidth=0.187, bordermode='ignore')
        self.gb_file_1_2_1_1_1_1.configure(textvariable=self.max_name_len)
        self.gb_file_1_2_1_1_1_1.configure(takefocus="")
        self.gb_file_1_2_1_1_1_1.configure(cursor="fleur")
        self.tooltip_font = "TkDefaultFont"
        self.gb_file_1_2_1_1_1_1_tooltip = \
        ToolTip(self.gb_file_1_2_1_1_1_1, self.tooltip_font, '''max feature name length''')

        self.gb_file_1_2_1_1_1_2 = ttk.Entry(self.Labelframe1)
        self.gb_file_1_2_1_1_1_2.place(relx=0.297, rely=0.709, relheight=0.248
                , relwidth=0.187, bordermode='ignore')
        self.gb_file_1_2_1_1_1_2.configure(textvariable=self.max_gene_len)
        self.gb_file_1_2_1_1_1_2.configure(takefocus="")
        self.gb_file_1_2_1_1_1_2.configure(cursor="fleur")
        self.tooltip_font = "TkDefaultFont"
        self.gb_file_1_2_1_1_1_2_tooltip = \
        ToolTip(self.gb_file_1_2_1_1_1_2, self.tooltip_font, '''max fragment sequence length''')

        self.TSeparator2 = ttk.Separator(self.Labelframe1)
        self.TSeparator2.place(relx=0.524, rely=0.135, relheight=0.78
                , bordermode='ignore')
        self.TSeparator2.configure(orient="vertical")

        self.Checkbutton1 = tk.Checkbutton(self.top)
        self.Checkbutton1.place(relx=0.733, rely=0.488, relheight=0.044
                , relwidth=0.215)
        self.Checkbutton1.configure(activebackground="#ececec")
        self.Checkbutton1.configure(activeforeground="#000000")
        self.Checkbutton1.configure(anchor='w')
        self.Checkbutton1.configure(background="#edf0f3")
        self.Checkbutton1.configure(compound='left')
        self.Checkbutton1.configure(font="-family {TkDefaultFont} -size 12")
        self.Checkbutton1.configure(foreground="#000000")
        self.Checkbutton1.configure(highlightbackground="#edf0f3")
        self.Checkbutton1.configure(highlightcolor="black")
        self.Checkbutton1.configure(justify='left')
        self.Checkbutton1.configure(selectcolor="#d9d9d9")
        self.Checkbutton1.configure(text='''No divide''')
        self.Checkbutton1.configure(variable=self.no_divide)

        self.Checkbutton1_1 = tk.Checkbutton(self.top)
        self.Checkbutton1_1.place(relx=0.467, rely=0.488, relheight=0.044
                , relwidth=0.243)
        self.Checkbutton1_1.configure(activebackground="#ececec")
        self.Checkbutton1_1.configure(activeforeground="#000000")
        self.Checkbutton1_1.configure(anchor='w')
        self.Checkbutton1_1.configure(background="#edf0f3")
        self.Checkbutton1_1.configure(compound='left')
        self.Checkbutton1_1.configure(font="-family {TkDefaultFont} -size 12")
        self.Checkbutton1_1.configure(foreground="#000000")
        self.Checkbutton1_1.configure(highlightbackground="#edf0f3")
        self.Checkbutton1_1.configure(highlightcolor="black")
        self.Checkbutton1_1.configure(justify='left')
        self.Checkbutton1_1.configure(selectcolor="#d9d9d9")
        self.Checkbutton1_1.configure(text='''Rename gene''')
        self.Checkbutton1_1.configure(variable=self.rename)

        self.TLabel1_1_1_1_1_2_2 = tk.Label(self.top)
        self.TLabel1_1_1_1_1_2_2.place(relx=0.05, rely=0.488, height=35
                , width=69)
        self.TLabel1_1_1_1_1_2_2.configure(activebackground="#f9f9f9")
        self.TLabel1_1_1_1_1_2_2.configure(activeforeground="black")
        self.TLabel1_1_1_1_1_2_2.configure(anchor='w')
        self.TLabel1_1_1_1_1_2_2.configure(background="#edf0f3")
        self.TLabel1_1_1_1_1_2_2.configure(compound='left')
        self.TLabel1_1_1_1_1_2_2.configure(font="-family {TkDefaultFont} -size 12")
        self.TLabel1_1_1_1_1_2_2.configure(foreground="#000000")
        self.TLabel1_1_1_1_1_2_2.configure(highlightbackground="#edf0f3")
        self.TLabel1_1_1_1_1_2_2.configure(highlightcolor="black")
        self.TLabel1_1_1_1_1_2_2.configure(justify='left')
        self.TLabel1_1_1_1_1_2_2.configure(text='''Unique''')

        self.TCombobox1_2 = ttk.Combobox(self.top)
        self.TCombobox1_2.place(relx=0.167, rely=0.488, relheight=0.044
                , relwidth=0.245)
        self.value_list = ['longest','first','no',]
        self.TCombobox1_2.configure(values=self.value_list)
        self.TCombobox1_2.configure(textvariable=self.unique)
        self.TCombobox1_2.configure(takefocus="")
        self.tooltip_font = "TkDefaultFont"
        self.TCombobox1_2_tooltip = \
        ToolTip(self.TCombobox1_2, self.tooltip_font, '''methods to remove redundant records''')

        self.Button1_1 = tk.Button(self.top)
        self.Button1_1.place(relx=0.833, rely=0.563, height=35, width=80)
        self.Button1_1.configure(activebackground="#edf0f3")
        self.Button1_1.configure(activeforeground="#000000")
        self.Button1_1.configure(background="#edf0f3")
        self.Button1_1.configure(command=ui_support.open_file)
        self.Button1_1.configure(compound='left')
        self.Button1_1.configure(font="-family {TkDefaultFont} -size 12")
        self.Button1_1.configure(foreground="#000000")
        self.Button1_1.configure(highlightbackground="#edf0f3")
        self.Button1_1.configure(highlightcolor="black")
        self.Button1_1.configure(pady="0")
        self.Button1_1.configure(text='''Open''')

        self.Button1 = tk.Button(self.top)
        self.Button1.place(relx=0.333, rely=0.863, height=40, width=189)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#edf0f3")
        self.Button1.configure(command=ui_support.run_gb2fasta)
        self.Button1.configure(compound='left')
        self.Button1.configure(font="-family {TkDefaultFont} -size 14")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#edf0f3")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Run''')

class evaluate:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#edf0f3'  # Closest X11 color: 'gray94'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        _tabfg1 = 'black' 
        _tabfg2 = 'black' 
        _tabbg1 = 'grey75' 
        _tabbg2 = 'grey89' 
        _bgmode = 'light' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("600x450+2686+25")
        top.minsize(72, 15)
        top.maxsize(1728, 997)
        top.resizable(1,  1)
        top.title("Evaluate")
        top.configure(background="#edf0f3")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.top = top
        self.fasta = tk.StringVar()
        self.fasta_folder = tk.StringVar()
        self.aln = tk.StringVar()
        self.out = tk.StringVar()
        self.size = tk.StringVar()
        self.step = tk.StringVar()
        self.quick = tk.IntVar()
        self.ig = tk.IntVar()
        self.iab = tk.IntVar()

        self.Labelframe1 = tk.LabelFrame(self.top)
        self.Labelframe1.place(relx=0.017, rely=0.0, relheight=0.333
                , relwidth=0.955)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(foreground="#000000")
        self.Labelframe1.configure(text='''Input''')
        self.Labelframe1.configure(background="#edf0f3")
        self.Labelframe1.configure(highlightbackground="#d9d9d9")
        self.Labelframe1.configure(highlightcolor="black")

        self.TLabel1 = tk.Label(self.Labelframe1)
        self.TLabel1.place(relx=0.052, rely=0.133, height=35, width=130
                , bordermode='ignore')
        self.TLabel1.configure(activebackground="#f9f9f9")
        self.TLabel1.configure(activeforeground="black")
        self.TLabel1.configure(anchor='w')
        self.TLabel1.configure(background="#edf0f3")
        self.TLabel1.configure(compound='left')
        self.TLabel1.configure(font="-family {TkDefaultFont} -size 12")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(highlightbackground="#edf0f3")
        self.TLabel1.configure(highlightcolor="black")
        self.TLabel1.configure(justify='left')
        self.TLabel1.configure(text='''Unaligned FASTA files''')
        self.tooltip_font = "TkDefaultFont"
        self.TLabel1_tooltip = \
        ToolTip(self.TLabel1, self.tooltip_font, '''unaligned''')

        self.gb_file = ttk.Entry(self.Labelframe1)
        self.gb_file.place(relx=0.314, rely=0.133, relheight=0.233
                , relwidth=0.489, bordermode='ignore')
        self.gb_file.configure(textvariable=self.fasta)
        self.gb_file.configure(takefocus="")
        self.gb_file.configure(cursor="fleur")
        self.tooltip_font = "TkDefaultFont"
        self.gb_file_tooltip = \
        ToolTip(self.gb_file, self.tooltip_font, '''unaligned fasta files''')

        self.Button1 = tk.Button(self.Labelframe1)
        self.Button1.place(relx=0.82, rely=0.133, height=35, width=90
                , bordermode='ignore')
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#edf0f3")
        self.Button1.configure(command=ui_support.open_file)
        self.Button1.configure(compound='left')
        self.Button1.configure(font="-family {TkDefaultFont} -size 12")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#edf0f3")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Open''')

        self.TLabel1 = tk.Label(self.Labelframe1)
        self.TLabel1.place(relx=0.052, rely=0.4, height=35, width=140
                , bordermode='ignore')
        self.TLabel1.configure(activebackground="#f9f9f9")
        self.TLabel1.configure(activeforeground="black")
        self.TLabel1.configure(anchor='w')
        self.TLabel1.configure(background="#edf0f3")
        self.TLabel1.configure(compound='left')
        self.TLabel1.configure(font="-family {TkDefaultFont} -size 12")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(highlightbackground="#edf0f3")
        self.TLabel1.configure(highlightcolor="black")
        self.TLabel1.configure(justify='left')
        self.TLabel1.configure(text='''Unaligned FASTA folder''')
        self.tooltip_font = "TkDefaultFont"
        self.TLabel1_tooltip = \
        ToolTip(self.TLabel1, self.tooltip_font, '''unaligned''')

        self.TLabel1_3 = tk.Label(self.Labelframe1)
        self.TLabel1_3.place(relx=0.052, rely=0.667, height=35, width=90
                , bordermode='ignore')
        self.TLabel1_3.configure(activebackground="#f9f9f9")
        self.TLabel1_3.configure(activeforeground="black")
        self.TLabel1_3.configure(anchor='w')
        self.TLabel1_3.configure(background="#edf0f3")
        self.TLabel1_3.configure(compound='left')
        self.TLabel1_3.configure(font="-family {TkDefaultFont} -size 12")
        self.TLabel1_3.configure(foreground="#000000")
        self.TLabel1_3.configure(highlightbackground="#edf0f3")
        self.TLabel1_3.configure(highlightcolor="black")
        self.TLabel1_3.configure(justify='left')
        self.TLabel1_3.configure(text='''Aligned FASTA files''')
        self.tooltip_font = "TkDefaultFont"
        self.TLabel1_3_tooltip = \
        ToolTip(self.TLabel1_3, self.tooltip_font, '''unaligned''')

        self.gb_file = ttk.Entry(self.Labelframe1)
        self.gb_file.place(relx=0.314, rely=0.4, relheight=0.233, relwidth=0.489
                , bordermode='ignore')
        self.gb_file.configure(textvariable=self.fasta_folder)
        self.gb_file.configure(takefocus="")
        self.gb_file.configure(cursor="fleur")
        self.tooltip_font = "TkDefaultFont"
        self.gb_file_tooltip = \
        ToolTip(self.gb_file, self.tooltip_font, '''unaligned fasta files''')

        self.gb_file_1 = ttk.Entry(self.Labelframe1)
        self.gb_file_1.place(relx=0.314, rely=0.667, relheight=0.233
                , relwidth=0.489, bordermode='ignore')
        self.gb_file_1.configure(textvariable=self.aln)
        self.gb_file_1.configure(takefocus="")
        self.gb_file_1.configure(cursor="fleur")
        self.tooltip_font = "TkDefaultFont"
        self.gb_file_1_tooltip = \
        ToolTip(self.gb_file_1, self.tooltip_font, '''unaligned fasta files''')

        self.Button1 = tk.Button(self.Labelframe1)
        self.Button1.place(relx=0.82, rely=0.4, height=35, width=90
                , bordermode='ignore')
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#edf0f3")
        self.Button1.configure(command=ui_support.open_file)
        self.Button1.configure(compound='left')
        self.Button1.configure(font="-family {TkDefaultFont} -size 12")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#edf0f3")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Open''')

        self.Button1_2 = tk.Button(self.Labelframe1)
        self.Button1_2.place(relx=0.82, rely=0.667, height=35, width=90
                , bordermode='ignore')
        self.Button1_2.configure(activebackground="#ececec")
        self.Button1_2.configure(activeforeground="#000000")
        self.Button1_2.configure(background="#edf0f3")
        self.Button1_2.configure(command=ui_support.open_file)
        self.Button1_2.configure(compound='left')
        self.Button1_2.configure(font="-family {TkDefaultFont} -size 12")
        self.Button1_2.configure(foreground="#000000")
        self.Button1_2.configure(highlightbackground="#edf0f3")
        self.Button1_2.configure(highlightcolor="black")
        self.Button1_2.configure(pady="0")
        self.Button1_2.configure(text='''Open''')

        self.TLabel1_3_1 = tk.Label(self.top)
        self.TLabel1_3_1.place(relx=0.117, rely=0.356, height=35, width=90)
        self.TLabel1_3_1.configure(activebackground="#f9f9f9")
        self.TLabel1_3_1.configure(activeforeground="black")
        self.TLabel1_3_1.configure(anchor='w')
        self.TLabel1_3_1.configure(background="#edf0f3")
        self.TLabel1_3_1.configure(compound='left')
        self.TLabel1_3_1.configure(font="-family {TkDefaultFont} -size 12")
        self.TLabel1_3_1.configure(foreground="#000000")
        self.TLabel1_3_1.configure(highlightbackground="#edf0f3")
        self.TLabel1_3_1.configure(highlightcolor="black")
        self.TLabel1_3_1.configure(justify='left')
        self.TLabel1_3_1.configure(text='''Output folder''')
        self.tooltip_font = "TkDefaultFont"
        self.TLabel1_3_1_tooltip = \
        ToolTip(self.TLabel1_3_1, self.tooltip_font, '''unaligned''')

        self.gb_file_1_1 = ttk.Entry(self.top)
        self.gb_file_1_1.place(relx=0.317, rely=0.356, relheight=0.078
                , relwidth=0.467)
        self.gb_file_1_1.configure(textvariable=self.out)
        self.gb_file_1_1.configure(takefocus="")
        self.gb_file_1_1.configure(cursor="fleur")
        self.tooltip_font = "TkDefaultFont"
        self.gb_file_1_1_tooltip = \
        ToolTip(self.gb_file_1_1, self.tooltip_font, '''unaligned fasta files''')

        self.Button1_2_1 = tk.Button(self.top)
        self.Button1_2_1.place(relx=0.8, rely=0.356, height=35, width=90)
        self.Button1_2_1.configure(activebackground="#ececec")
        self.Button1_2_1.configure(activeforeground="#000000")
        self.Button1_2_1.configure(background="#edf0f3")
        self.Button1_2_1.configure(command=ui_support.open_file)
        self.Button1_2_1.configure(compound='left')
        self.Button1_2_1.configure(font="-family {TkDefaultFont} -size 12")
        self.Button1_2_1.configure(foreground="#000000")
        self.Button1_2_1.configure(highlightbackground="#edf0f3")
        self.Button1_2_1.configure(highlightcolor="black")
        self.Button1_2_1.configure(pady="0")
        self.Button1_2_1.configure(text='''Open''')

        self.Labelframe1 = tk.LabelFrame(self.top)
        self.Labelframe1.place(relx=0.017, rely=0.467, relheight=0.156
                , relwidth=0.955)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(foreground="#000000")
        self.Labelframe1.configure(text='''Sliding window''')
        self.Labelframe1.configure(background="#edf0f3")
        self.Labelframe1.configure(highlightbackground="#d9d9d9")
        self.Labelframe1.configure(highlightcolor="black")

        self.Checkbutton1 = tk.Checkbutton(self.Labelframe1)
        self.Checkbutton1.place(relx=0.035, rely=0.429, relheight=0.3
                , relwidth=0.262, bordermode='ignore')
        self.Checkbutton1.configure(activebackground="#ececec")
        self.Checkbutton1.configure(activeforeground="#000000")
        self.Checkbutton1.configure(anchor='w')
        self.Checkbutton1.configure(background="#edf0f3")
        self.Checkbutton1.configure(compound='left')
        self.Checkbutton1.configure(foreground="#000000")
        self.Checkbutton1.configure(highlightbackground="#edf0f3")
        self.Checkbutton1.configure(highlightcolor="black")
        self.Checkbutton1.configure(justify='left')
        self.Checkbutton1.configure(selectcolor="#edf0f3")
        self.Checkbutton1.configure(text='''Skip sliding window''')
        self.Checkbutton1.configure(variable=self.quick)

        self.Label1 = tk.Label(self.Labelframe1)
        self.Label1.place(relx=0.314, rely=0.429, height=22, width=80
                , bordermode='ignore')
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(anchor='w')
        self.Label1.configure(background="#edf0f3")
        self.Label1.configure(compound='left')
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Window size''')

        self.Entry1 = tk.Entry(self.Labelframe1)
        self.Entry1.place(relx=0.471, rely=0.429, height=30, relwidth=0.175
                , bordermode='ignore')
        self.Entry1.configure(background="white")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(highlightbackground="#d9d9d9")
        self.Entry1.configure(highlightcolor="black")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.configure(selectbackground="#c4c4c4")
        self.Entry1.configure(selectforeground="black")
        self.Entry1.configure(textvariable=self.size)

        self.Label1_3 = tk.Label(self.Labelframe1)
        self.Label1_3.place(relx=0.681, rely=0.429, height=22, width=80
                , bordermode='ignore')
        self.Label1_3.configure(activebackground="#f9f9f9")
        self.Label1_3.configure(anchor='w')
        self.Label1_3.configure(background="#edf0f3")
        self.Label1_3.configure(compound='left')
        self.Label1_3.configure(foreground="#000000")
        self.Label1_3.configure(highlightbackground="#d9d9d9")
        self.Label1_3.configure(highlightcolor="black")
        self.Label1_3.configure(text='''Step length''')

        self.Entry1_1 = tk.Entry(self.Labelframe1)
        self.Entry1_1.place(relx=0.82, rely=0.429, height=30, relwidth=0.14
                , bordermode='ignore')
        self.Entry1_1.configure(background="white")
        self.Entry1_1.configure(font="TkFixedFont")
        self.Entry1_1.configure(foreground="#000000")
        self.Entry1_1.configure(highlightbackground="#d9d9d9")
        self.Entry1_1.configure(highlightcolor="black")
        self.Entry1_1.configure(insertbackground="black")
        self.Entry1_1.configure(selectbackground="#c4c4c4")
        self.Entry1_1.configure(selectforeground="black")
        self.Entry1_1.configure(textvariable=self.step)

        self.Labelframe1 = tk.LabelFrame(self.top)
        self.Labelframe1.place(relx=0.017, rely=0.644, relheight=0.156
                , relwidth=0.955)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(foreground="#000000")
        self.Labelframe1.configure(text='''Advance''')
        self.Labelframe1.configure(background="#edf0f3")
        self.Labelframe1.configure(highlightbackground="#d9d9d9")
        self.Labelframe1.configure(highlightcolor="black")

        self.Checkbutton1 = tk.Checkbutton(self.Labelframe1)
        self.Checkbutton1.place(relx=0.087, rely=0.429, relheight=0.3
                , relwidth=0.314, bordermode='ignore')
        self.Checkbutton1.configure(activebackground="#ececec")
        self.Checkbutton1.configure(activeforeground="#000000")
        self.Checkbutton1.configure(anchor='w')
        self.Checkbutton1.configure(background="#edf0f3")
        self.Checkbutton1.configure(compound='left')
        self.Checkbutton1.configure(foreground="#000000")
        self.Checkbutton1.configure(highlightbackground="#edf0f3")
        self.Checkbutton1.configure(highlightcolor="black")
        self.Checkbutton1.configure(justify='left')
        self.Checkbutton1.configure(selectcolor="#edf0f3")
        self.Checkbutton1.configure(text='''Ignore gaps in alignment''')
        self.Checkbutton1.configure(variable=self.ig)

        self.Checkbutton1_2 = tk.Checkbutton(self.Labelframe1)
        self.Checkbutton1_2.place(relx=0.593, rely=0.429, relheight=0.3
                , relwidth=0.314, bordermode='ignore')
        self.Checkbutton1_2.configure(activebackground="#ececec")
        self.Checkbutton1_2.configure(activeforeground="#000000")
        self.Checkbutton1_2.configure(anchor='w')
        self.Checkbutton1_2.configure(background="#edf0f3")
        self.Checkbutton1_2.configure(compound='left')
        self.Checkbutton1_2.configure(foreground="#000000")
        self.Checkbutton1_2.configure(highlightbackground="#edf0f3")
        self.Checkbutton1_2.configure(highlightcolor="black")
        self.Checkbutton1_2.configure(justify='left')
        self.Checkbutton1_2.configure(selectcolor="#edf0f3")
        self.Checkbutton1_2.configure(text='''Ignore ambiguous bases''')
        self.Checkbutton1_2.configure(variable=self.iab)

        self.Button1_3 = tk.Button(self.top)
        self.Button1_3.place(relx=0.333, rely=0.867, height=40, width=189)
        self.Button1_3.configure(activebackground="#ececec")
        self.Button1_3.configure(activeforeground="#000000")
        self.Button1_3.configure(background="#edf0f3")
        self.Button1_3.configure(command=ui_support.run_evaluate)
        self.Button1_3.configure(compound='left')
        self.Button1_3.configure(font="-family {TkDefaultFont} -size 14")
        self.Button1_3.configure(foreground="#000000")
        self.Button1_3.configure(highlightbackground="#edf0f3")
        self.Button1_3.configure(highlightcolor="black")
        self.Button1_3.configure(pady="0")
        self.Button1_3.configure(relief="raised")
        self.Button1_3.configure(text='''Run''')

class primer:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#edf0f3'  # Closest X11 color: 'gray94'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        _tabfg1 = 'black' 
        _tabfg2 = 'black' 
        _tabbg1 = 'grey75' 
        _tabbg2 = 'grey89' 
        _bgmode = 'light' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("600x500+2686+511")
        top.minsize(72, 15)
        top.maxsize(1728, 997)
        top.resizable(1,  1)
        top.title("Primer")
        top.configure(background="#edf0f3")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.top = top
        self.aln = tk.StringVar()
        self.aln_folder = tk.StringVar()
        self.out = tk.StringVar()
        self.coverage = tk.StringVar()
        self.mismatch = tk.StringVar()
        self.resolution = tk.StringVar()
        self.max_gene_len = tk.StringVar()
        self.pmin = tk.StringVar()
        self.pmax = tk.StringVar()
        self.amin = tk.StringVar()
        self.amax = tk.StringVar()
        self.expand = tk.StringVar()

        self.Labelframe1 = tk.LabelFrame(self.top)
        self.Labelframe1.place(relx=0.017, rely=0.02, relheight=0.2
                , relwidth=0.955)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(foreground="#000000")
        self.Labelframe1.configure(text='''Input''')
        self.Labelframe1.configure(background="#edf0f3")
        self.Labelframe1.configure(highlightbackground="#d9d9d9")
        self.Labelframe1.configure(highlightcolor="black")

        self.TLabel1 = tk.Label(self.Labelframe1)
        self.TLabel1.place(relx=0.052, rely=0.2, height=35, width=130
                , bordermode='ignore')
        self.TLabel1.configure(activebackground="#f9f9f9")
        self.TLabel1.configure(activeforeground="black")
        self.TLabel1.configure(anchor='w')
        self.TLabel1.configure(background="#edf0f3")
        self.TLabel1.configure(compound='left')
        self.TLabel1.configure(font="-family {TkDefaultFont} -size 12")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(highlightbackground="#edf0f3")
        self.TLabel1.configure(highlightcolor="black")
        self.TLabel1.configure(justify='left')
        self.TLabel1.configure(text='''Aligned FASTA files''')
        self.tooltip_font = "TkDefaultFont"
        self.TLabel1_tooltip = \
        ToolTip(self.TLabel1, self.tooltip_font, '''unaligned''')

        self.gb_file = ttk.Entry(self.Labelframe1)
        self.gb_file.place(relx=0.314, rely=0.2, relheight=0.35, relwidth=0.489
                , bordermode='ignore')
        self.gb_file.configure(textvariable=self.aln)
        self.gb_file.configure(takefocus="")
        self.gb_file.configure(cursor="fleur")
        self.tooltip_font = "TkDefaultFont"
        self.gb_file_tooltip = \
        ToolTip(self.gb_file, self.tooltip_font, '''unaligned fasta files''')

        self.Button1 = tk.Button(self.Labelframe1)
        self.Button1.place(relx=0.82, rely=0.2, height=35, width=90
                , bordermode='ignore')
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#edf0f3")
        self.Button1.configure(command=ui_support.open_file)
        self.Button1.configure(compound='left')
        self.Button1.configure(font="-family {TkDefaultFont} -size 12")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#edf0f3")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(relief="raised")
        self.Button1.configure(text='''Open''')

        self.TLabel1 = tk.Label(self.Labelframe1)
        self.TLabel1.place(relx=0.052, rely=0.6, height=35, width=140
                , bordermode='ignore')
        self.TLabel1.configure(activebackground="#f9f9f9")
        self.TLabel1.configure(activeforeground="black")
        self.TLabel1.configure(anchor='w')
        self.TLabel1.configure(background="#edf0f3")
        self.TLabel1.configure(compound='left')
        self.TLabel1.configure(font="-family {TkDefaultFont} -size 12")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(highlightbackground="#edf0f3")
        self.TLabel1.configure(highlightcolor="black")
        self.TLabel1.configure(justify='left')
        self.TLabel1.configure(text='''Aligned FASTA folder''')
        self.tooltip_font = "TkDefaultFont"
        self.TLabel1_tooltip = \
        ToolTip(self.TLabel1, self.tooltip_font, '''unaligned''')

        self.gb_file = ttk.Entry(self.Labelframe1)
        self.gb_file.place(relx=0.314, rely=0.6, relheight=0.35, relwidth=0.489
                , bordermode='ignore')
        self.gb_file.configure(textvariable=self.aln_folder)
        self.gb_file.configure(takefocus="")
        self.gb_file.configure(cursor="fleur")
        self.tooltip_font = "TkDefaultFont"
        self.gb_file_tooltip = \
        ToolTip(self.gb_file, self.tooltip_font, '''unaligned fasta files''')

        self.Button1 = tk.Button(self.Labelframe1)
        self.Button1.place(relx=0.82, rely=0.6, height=35, width=90
                , bordermode='ignore')
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#edf0f3")
        self.Button1.configure(command=ui_support.open_file)
        self.Button1.configure(compound='left')
        self.Button1.configure(font="-family {TkDefaultFont} -size 12")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#edf0f3")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(relief="raised")
        self.Button1.configure(text='''Open''')

        self.TLabel1_3_1 = tk.Label(self.top)
        self.TLabel1_3_1.place(relx=0.117, rely=0.24, height=35, width=90)
        self.TLabel1_3_1.configure(activebackground="#f9f9f9")
        self.TLabel1_3_1.configure(activeforeground="black")
        self.TLabel1_3_1.configure(anchor='w')
        self.TLabel1_3_1.configure(background="#edf0f3")
        self.TLabel1_3_1.configure(compound='left')
        self.TLabel1_3_1.configure(font="-family {TkDefaultFont} -size 12")
        self.TLabel1_3_1.configure(foreground="#000000")
        self.TLabel1_3_1.configure(highlightbackground="#edf0f3")
        self.TLabel1_3_1.configure(highlightcolor="black")
        self.TLabel1_3_1.configure(justify='left')
        self.TLabel1_3_1.configure(text='''Output folder''')
        self.tooltip_font = "TkDefaultFont"
        self.TLabel1_3_1_tooltip = \
        ToolTip(self.TLabel1_3_1, self.tooltip_font, '''unaligned''')

        self.gb_file_1_1 = ttk.Entry(self.top)
        self.gb_file_1_1.place(relx=0.317, rely=0.24, relheight=0.07
                , relwidth=0.467)
        self.gb_file_1_1.configure(textvariable=self.out)
        self.gb_file_1_1.configure(takefocus="")
        self.gb_file_1_1.configure(cursor="fleur")
        self.tooltip_font = "TkDefaultFont"
        self.gb_file_1_1_tooltip = \
        ToolTip(self.gb_file_1_1, self.tooltip_font, '''unaligned fasta files''')

        self.Button1 = tk.Button(self.top)
        self.Button1.place(relx=0.8, rely=0.24, height=35, width=90)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#edf0f3")
        self.Button1.configure(command=ui_support.open_file)
        self.Button1.configure(compound='left')
        self.Button1.configure(font="-family {TkDefaultFont} -size 12")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#edf0f3")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(relief="raised")
        self.Button1.configure(text='''Open''')

        self.Labelframe1 = tk.LabelFrame(self.top)
        self.Labelframe1.place(relx=0.017, rely=0.34, relheight=0.38
                , relwidth=0.955)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(font="-family {TkDefaultFont} -size 14")
        self.Labelframe1.configure(foreground="#000000")
        self.Labelframe1.configure(text='''Advance''')
        self.Labelframe1.configure(background="#edf0f3")
        self.Labelframe1.configure(highlightbackground="#edf0f3")
        self.Labelframe1.configure(highlightcolor="black")

        self.TLabel1_1_1_1_1_2_2_1 = tk.Label(self.Labelframe1)
        self.TLabel1_1_1_1_1_2_2_1.place(relx=0.07, rely=0.158, height=35
                , width=60, bordermode='ignore')
        self.TLabel1_1_1_1_1_2_2_1.configure(activebackground="#f9f9f9")
        self.TLabel1_1_1_1_1_2_2_1.configure(activeforeground="black")
        self.TLabel1_1_1_1_1_2_2_1.configure(anchor='w')
        self.TLabel1_1_1_1_1_2_2_1.configure(background="#edf0f3")
        self.TLabel1_1_1_1_1_2_2_1.configure(compound='left')
        self.TLabel1_1_1_1_1_2_2_1.configure(font="-family {TkDefaultFont} -size 12")
        self.TLabel1_1_1_1_1_2_2_1.configure(foreground="#000000")
        self.TLabel1_1_1_1_1_2_2_1.configure(highlightbackground="#edf0f3")
        self.TLabel1_1_1_1_1_2_2_1.configure(highlightcolor="black")
        self.TLabel1_1_1_1_1_2_2_1.configure(justify='left')
        self.TLabel1_1_1_1_1_2_2_1.configure(text='''Coverage''')

        self.gb_file_1_2_1_1_1 = ttk.Entry(self.Labelframe1)
        self.gb_file_1_2_1_1_1.place(relx=0.297, rely=0.142, relheight=0.184
                , relwidth=0.192, bordermode='ignore')
        self.gb_file_1_2_1_1_1.configure(textvariable=self.coverage)
        self.gb_file_1_2_1_1_1.configure(takefocus="")
        self.gb_file_1_2_1_1_1.configure(cursor="fleur")
        self.tooltip_font = "TkDefaultFont"
        self.gb_file_1_2_1_1_1_tooltip = \
        ToolTip(self.gb_file_1_2_1_1_1, self.tooltip_font, '''minimal coverage of primer on alignment''')

        self.TLabel1_1_1_1_1_2_2_1_1 = tk.Label(self.Labelframe1)
        self.TLabel1_1_1_1_1_2_2_1_1.place(relx=0.07, rely=0.368, height=35
                , width=120, bordermode='ignore')
        self.TLabel1_1_1_1_1_2_2_1_1.configure(activebackground="#f9f9f9")
        self.TLabel1_1_1_1_1_2_2_1_1.configure(activeforeground="black")
        self.TLabel1_1_1_1_1_2_2_1_1.configure(anchor='w')
        self.TLabel1_1_1_1_1_2_2_1_1.configure(background="#edf0f3")
        self.TLabel1_1_1_1_1_2_2_1_1.configure(compound='left')
        self.TLabel1_1_1_1_1_2_2_1_1.configure(font="-family {TkDefaultFont} -size 12")
        self.TLabel1_1_1_1_1_2_2_1_1.configure(foreground="#000000")
        self.TLabel1_1_1_1_1_2_2_1_1.configure(highlightbackground="#edf0f3")
        self.TLabel1_1_1_1_1_2_2_1_1.configure(highlightcolor="black")
        self.TLabel1_1_1_1_1_2_2_1_1.configure(justify='left')
        self.TLabel1_1_1_1_1_2_2_1_1.configure(text='''Mismatch''')

        self.TLabel1_1_1_1_1_2_2_1_1_1 = tk.Label(self.Labelframe1)
        self.TLabel1_1_1_1_1_2_2_1_1_1.place(relx=0.07, rely=0.579, height=35
                , width=130, bordermode='ignore')
        self.TLabel1_1_1_1_1_2_2_1_1_1.configure(activebackground="#f9f9f9")
        self.TLabel1_1_1_1_1_2_2_1_1_1.configure(activeforeground="black")
        self.TLabel1_1_1_1_1_2_2_1_1_1.configure(anchor='w')
        self.TLabel1_1_1_1_1_2_2_1_1_1.configure(background="#edf0f3")
        self.TLabel1_1_1_1_1_2_2_1_1_1.configure(compound='left')
        self.TLabel1_1_1_1_1_2_2_1_1_1.configure(font="-family {TkDefaultFont} -size 12")
        self.TLabel1_1_1_1_1_2_2_1_1_1.configure(foreground="#000000")
        self.TLabel1_1_1_1_1_2_2_1_1_1.configure(highlightbackground="#edf0f3")
        self.TLabel1_1_1_1_1_2_2_1_1_1.configure(highlightcolor="black")
        self.TLabel1_1_1_1_1_2_2_1_1_1.configure(justify='left')
        self.TLabel1_1_1_1_1_2_2_1_1_1.configure(text='''Resolution''')

        self.gb_file_1_2_1_1_1_1 = ttk.Entry(self.Labelframe1)
        self.gb_file_1_2_1_1_1_1.place(relx=0.297, rely=0.368, relheight=0.184
                , relwidth=0.192, bordermode='ignore')
        self.gb_file_1_2_1_1_1_1.configure(textvariable=self.mismatch)
        self.gb_file_1_2_1_1_1_1.configure(takefocus="")
        self.gb_file_1_2_1_1_1_1.configure(cursor="fleur")
        self.tooltip_font = "TkDefaultFont"
        self.gb_file_1_2_1_1_1_1_tooltip = \
        ToolTip(self.gb_file_1_2_1_1_1_1, self.tooltip_font, '''maximum mismatch bases in primer''')

        self.gb_file_1_2_1_1_1_2 = ttk.Entry(self.Labelframe1)
        self.gb_file_1_2_1_1_1_2.place(relx=0.297, rely=0.579, relheight=0.184
                , relwidth=0.192, bordermode='ignore')
        self.gb_file_1_2_1_1_1_2.configure(textvariable=self.resolution)
        self.gb_file_1_2_1_1_1_2.configure(takefocus="")
        self.gb_file_1_2_1_1_1_2.configure(cursor="fleur")
        self.tooltip_font = "TkDefaultFont"
        self.gb_file_1_2_1_1_1_2_tooltip = \
        ToolTip(self.gb_file_1_2_1_1_1_2, self.tooltip_font, '''minimal resolution of amplified fragment''')

        self.TSeparator2 = ttk.Separator(self.Labelframe1)
        self.TSeparator2.place(relx=0.524, rely=0.137, relheight=0.779
                , bordermode='ignore')
        self.TSeparator2.configure(orient="vertical")

        self.TLabel1_1_1_1_1_2_2_1_1_1_1 = tk.Label(self.Labelframe1)
        self.TLabel1_1_1_1_1_2_2_1_1_1_1.place(relx=0.07, rely=0.789, height=35
                , width=130, bordermode='ignore')
        self.TLabel1_1_1_1_1_2_2_1_1_1_1.configure(activebackground="#f9f9f9")
        self.TLabel1_1_1_1_1_2_2_1_1_1_1.configure(activeforeground="black")
        self.TLabel1_1_1_1_1_2_2_1_1_1_1.configure(anchor='w')
        self.TLabel1_1_1_1_1_2_2_1_1_1_1.configure(background="#edf0f3")
        self.TLabel1_1_1_1_1_2_2_1_1_1_1.configure(compound='left')
        self.TLabel1_1_1_1_1_2_2_1_1_1_1.configure(font="-family {TkDefaultFont} -size 12")
        self.TLabel1_1_1_1_1_2_2_1_1_1_1.configure(foreground="#000000")
        self.TLabel1_1_1_1_1_2_2_1_1_1_1.configure(highlightbackground="#edf0f3")
        self.TLabel1_1_1_1_1_2_2_1_1_1_1.configure(highlightcolor="black")
        self.TLabel1_1_1_1_1_2_2_1_1_1_1.configure(justify='left')
        self.TLabel1_1_1_1_1_2_2_1_1_1_1.configure(text='''Top n''')

        self.gb_file_1_2_1_1_1_2_1 = ttk.Entry(self.Labelframe1)
        self.gb_file_1_2_1_1_1_2_1.place(relx=0.297, rely=0.789, relheight=0.184
                , relwidth=0.192, bordermode='ignore')
        self.gb_file_1_2_1_1_1_2_1.configure(textvariable=self.max_gene_len)
        self.gb_file_1_2_1_1_1_2_1.configure(takefocus="")
        self.gb_file_1_2_1_1_1_2_1.configure(cursor="fleur")
        self.tooltip_font = "TkDefaultFont"
        self.gb_file_1_2_1_1_1_2_1_tooltip = \
        ToolTip(self.gb_file_1_2_1_1_1_2_1, self.tooltip_font, '''Only keep top best primers''')

        self.TLabel1_1_1_1_1_2_2_1_2 = tk.Label(self.Labelframe1)
        self.TLabel1_1_1_1_1_2_2_1_2.place(relx=0.541, rely=0.158, height=35
                , width=80, bordermode='ignore')
        self.TLabel1_1_1_1_1_2_2_1_2.configure(activebackground="#f9f9f9")
        self.TLabel1_1_1_1_1_2_2_1_2.configure(activeforeground="black")
        self.TLabel1_1_1_1_1_2_2_1_2.configure(anchor='w')
        self.TLabel1_1_1_1_1_2_2_1_2.configure(background="#edf0f3")
        self.TLabel1_1_1_1_1_2_2_1_2.configure(compound='left')
        self.TLabel1_1_1_1_1_2_2_1_2.configure(font="-family {TkDefaultFont} -size 12")
        self.TLabel1_1_1_1_1_2_2_1_2.configure(foreground="#000000")
        self.TLabel1_1_1_1_1_2_2_1_2.configure(highlightbackground="#edf0f3")
        self.TLabel1_1_1_1_1_2_2_1_2.configure(highlightcolor="black")
        self.TLabel1_1_1_1_1_2_2_1_2.configure(justify='left')
        self.TLabel1_1_1_1_1_2_2_1_2.configure(text='''Primer length''')

        self.gb_file_1_2_1_1_1_3 = ttk.Entry(self.Labelframe1)
        self.gb_file_1_2_1_1_1_3.place(relx=0.716, rely=0.158, relheight=0.184
                , relwidth=0.087, bordermode='ignore')
        self.gb_file_1_2_1_1_1_3.configure(textvariable=self.pmin)
        self.gb_file_1_2_1_1_1_3.configure(takefocus="")
        self.gb_file_1_2_1_1_1_3.configure(cursor="fleur")

        self.Label1 = tk.Label(self.Labelframe1)
        self.Label1.place(relx=0.803, rely=0.158, height=35, width=36
                , bordermode='ignore')
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="SystemButtonText")
        self.Label1.configure(anchor='w')
        self.Label1.configure(background="#edf0f3")
        self.Label1.configure(compound='left')
        self.Label1.configure(font="-family {TkDefaultFont} -size 13")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#edf0f3")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''to''')

        self.gb_file_1_2_1_1_1_3_1 = ttk.Entry(self.Labelframe1)
        self.gb_file_1_2_1_1_1_3_1.place(relx=0.855, rely=0.158, relheight=0.184
                , relwidth=0.122, bordermode='ignore')
        self.gb_file_1_2_1_1_1_3_1.configure(textvariable=self.pmax)
        self.gb_file_1_2_1_1_1_3_1.configure(takefocus="")
        self.gb_file_1_2_1_1_1_3_1.configure(cursor="fleur")

        self.TLabel1_1_1_1_1_2_2_1_2_1 = tk.Label(self.Labelframe1)
        self.TLabel1_1_1_1_1_2_2_1_2_1.place(relx=0.541, rely=0.368, height=35
                , width=100, bordermode='ignore')
        self.TLabel1_1_1_1_1_2_2_1_2_1.configure(activebackground="#f9f9f9")
        self.TLabel1_1_1_1_1_2_2_1_2_1.configure(activeforeground="black")
        self.TLabel1_1_1_1_1_2_2_1_2_1.configure(anchor='w')
        self.TLabel1_1_1_1_1_2_2_1_2_1.configure(background="#edf0f3")
        self.TLabel1_1_1_1_1_2_2_1_2_1.configure(compound='left')
        self.TLabel1_1_1_1_1_2_2_1_2_1.configure(font="-family {TkDefaultFont} -size 12")
        self.TLabel1_1_1_1_1_2_2_1_2_1.configure(foreground="#000000")
        self.TLabel1_1_1_1_1_2_2_1_2_1.configure(highlightbackground="#edf0f3")
        self.TLabel1_1_1_1_1_2_2_1_2_1.configure(highlightcolor="black")
        self.TLabel1_1_1_1_1_2_2_1_2_1.configure(justify='left')
        self.TLabel1_1_1_1_1_2_2_1_2_1.configure(text='''Amplified length''')

        self.gb_file_1_2_1_1_1_3_2 = ttk.Entry(self.Labelframe1)
        self.gb_file_1_2_1_1_1_3_2.place(relx=0.716, rely=0.368, relheight=0.184
                , relwidth=0.087, bordermode='ignore')
        self.gb_file_1_2_1_1_1_3_2.configure(textvariable=self.amin)
        self.gb_file_1_2_1_1_1_3_2.configure(takefocus="")
        self.gb_file_1_2_1_1_1_3_2.configure(cursor="fleur")
        self.tooltip_font = "TkDefaultFont"
        self.gb_file_1_2_1_1_1_3_2_tooltip = \
        ToolTip(self.gb_file_1_2_1_1_1_3_2, self.tooltip_font, '''including primer length''')

        self.Label1 = tk.Label(self.Labelframe1)
        self.Label1.place(relx=0.803, rely=0.368, height=35, width=36
                , bordermode='ignore')
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="SystemButtonText")
        self.Label1.configure(anchor='w')
        self.Label1.configure(background="#edf0f3")
        self.Label1.configure(compound='left')
        self.Label1.configure(font="-family {TkDefaultFont} -size 13")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#edf0f3")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''to''')

        self.gb_file_1_2_1_1_1_3_1_1 = ttk.Entry(self.Labelframe1)
        self.gb_file_1_2_1_1_1_3_1_1.place(relx=0.855, rely=0.368
                , relheight=0.184, relwidth=0.122, bordermode='ignore')
        self.gb_file_1_2_1_1_1_3_1_1.configure(textvariable=self.amax)
        self.gb_file_1_2_1_1_1_3_1_1.configure(takefocus="")
        self.gb_file_1_2_1_1_1_3_1_1.configure(cursor="fleur")

        self.Label1_4 = tk.Label(self.Labelframe1)
        self.Label1_4.place(relx=0.541, rely=0.579, height=35, width=130
                , bordermode='ignore')
        self.Label1_4.configure(activebackground="#f9f9f9")
        self.Label1_4.configure(anchor='w')
        self.Label1_4.configure(background="#edf0f3")
        self.Label1_4.configure(compound='left')
        self.Label1_4.configure(foreground="#000000")
        self.Label1_4.configure(highlightbackground="#d9d9d9")
        self.Label1_4.configure(highlightcolor="black")
        self.Label1_4.configure(text='''Sliding window size''')

        self.Label1_3 = tk.Label(self.Labelframe1)
        self.Label1_3.place(relx=0.541, rely=0.789, height=35, width=130
                , bordermode='ignore')
        self.Label1_3.configure(activebackground="#f9f9f9")
        self.Label1_3.configure(anchor='w')
        self.Label1_3.configure(background="#edf0f3")
        self.Label1_3.configure(compound='left')
        self.Label1_3.configure(foreground="#000000")
        self.Label1_3.configure(highlightbackground="#d9d9d9")
        self.Label1_3.configure(highlightcolor="black")
        self.Label1_3.configure(text='''Sliding window step''')

        self.gb_file_1_2_1_1_1_3_1_2 = ttk.Entry(self.Labelframe1)
        self.gb_file_1_2_1_1_1_3_1_2.place(relx=0.803, rely=0.579
                , relheight=0.184, relwidth=0.14, bordermode='ignore')
        self.gb_file_1_2_1_1_1_3_1_2.configure(textvariable=self.expand)
        self.gb_file_1_2_1_1_1_3_1_2.configure(takefocus="")
        self.gb_file_1_2_1_1_1_3_1_2.configure(cursor="fleur")

        self.gb_file_1_2_1_1_1_3_1_2_1 = ttk.Entry(self.Labelframe1)
        self.gb_file_1_2_1_1_1_3_1_2_1.place(relx=0.803, rely=0.789
                , relheight=0.184, relwidth=0.14, bordermode='ignore')
        self.gb_file_1_2_1_1_1_3_1_2_1.configure(textvariable=self.expand)
        self.gb_file_1_2_1_1_1_3_1_2_1.configure(takefocus="")
        self.gb_file_1_2_1_1_1_3_1_2_1.configure(cursor="fleur")

        self.Button1_3 = tk.Button(self.top)
        self.Button1_3.place(relx=0.367, rely=0.82, height=40, width=180)
        self.Button1_3.configure(activebackground="#ececec")
        self.Button1_3.configure(activeforeground="#000000")
        self.Button1_3.configure(background="#edf0f3")
        self.Button1_3.configure(command=ui_support.run_primer)
        self.Button1_3.configure(compound='left')
        self.Button1_3.configure(font="-family {TkDefaultFont} -size 14")
        self.Button1_3.configure(foreground="#000000")
        self.Button1_3.configure(highlightbackground="#edf0f3")
        self.Button1_3.configure(highlightcolor="black")
        self.Button1_3.configure(pady="0")
        self.Button1_3.configure(relief="raised")
        self.Button1_3.configure(text='''Run''')

class log:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#edf0f3'  # Closest X11 color: 'gray94'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        _tabfg1 = 'black' 
        _tabfg2 = 'black' 
        _tabbg1 = 'grey75' 
        _tabbg2 = 'grey89' 
        _bgmode = 'light' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("600x400+2532+336")
        top.minsize(72, 15)
        top.maxsize(3648, 1052)
        top.resizable(1,  1)
        top.title("Running...")
        top.configure(background="#edf0f3")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.top = top

        self.Scrolledtext1 = ScrolledText(self.top)
        self.Scrolledtext1.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.0)

        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.configure(font="TkTextFont")
        self.Scrolledtext1.configure(foreground="black")
        self.Scrolledtext1.configure(highlightbackground="#edf0f3")
        self.Scrolledtext1.configure(highlightcolor="black")
        self.Scrolledtext1.configure(insertbackground="black")
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="#c4c4c4")
        self.Scrolledtext1.configure(selectforeground="black")
        self.Scrolledtext1.configure(wrap="none")

# Support code for Balloon Help (also called tooltips).
# derived from http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
from time import time, localtime, strftime
class ToolTip(tk.Toplevel):
    """ Provides a ToolTip widget for Tkinter. """
    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=0.5, follow=True):
        self.wdgt = wdgt
        self.parent = self.wdgt.master
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        self.withdraw()
        self.overrideredirect(True)
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                font=tooltip_font,
                aspect=1000).grid()
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')
    def spawn(self, event=None):
        self.visible = 1
        self.after(int(self.delay * 1000), self.show)
    def show(self):
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()
    def move(self, event):
        self.lastMotion = time()
        if self.follow is False:
            self.withdraw()
            self.visible = 1
        self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
        try:
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)
    def hide(self, event=None):
        self.visible = 0
        self.withdraw()
    def update(self, msg):
        self.msgVar.set(msg)
#                   End of Class ToolTip

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')
def start_up():
    ui_support.main()

if __name__ == '__main__':
    ui_support.main()




