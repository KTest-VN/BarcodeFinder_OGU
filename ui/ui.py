#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.4
#  in conjunction with Tcl version 8.6
#    May 13, 2022 08:34:11 PM CST  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *

import ui_support

class main:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        _tabfg1 = 'black' 
        _tabfg2 = 'black' 
        _tabbg1 = 'grey75' 
        _tabbg2 = 'grey89' 
        _bgmode = 'light' 

        top.geometry("800x451+396+188")
        top.minsize(120, 1)
        top.maxsize(2564, 1421)
        top.resizable(1,  1)
        top.title("BarcodeFinder")
        top.configure(background="#edf0f3")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.top = top
        self.che1 = tk.IntVar()
        self.che2 = tk.IntVar()
        self.che3 = tk.IntVar()

        self.run_gb2fasta = tk.Checkbutton(self.top)
        self.run_gb2fasta.place(relx=0.163, rely=0.532, relheight=0.069
                , relwidth=0.165)
        self.run_gb2fasta.configure(activebackground="#ececec")
        self.run_gb2fasta.configure(activeforeground="#000000")
        self.run_gb2fasta.configure(background="#edf0f0")
        self.run_gb2fasta.configure(disabledforeground="#a3a3a3")
        self.run_gb2fasta.configure(font="-family {TkDefaultFont} -size 15")
        self.run_gb2fasta.configure(foreground="#000000")
        self.run_gb2fasta.configure(highlightbackground="#d9d9d9")
        self.run_gb2fasta.configure(highlightcolor="black")
        self.run_gb2fasta.configure(justify='left')
        self.run_gb2fasta.configure(text='''GB2Fasta''')
        self.run_gb2fasta.configure(variable=self.che1)

        self.run_evaluate = tk.Checkbutton(self.top)
        self.run_evaluate.place(relx=0.413, rely=0.532, relheight=0.069
                , relwidth=0.165)
        self.run_evaluate.configure(activebackground="#ececec")
        self.run_evaluate.configure(activeforeground="#000000")
        self.run_evaluate.configure(background="#edf0f0")
        self.run_evaluate.configure(disabledforeground="#a3a3a3")
        self.run_evaluate.configure(font="-family {TkDefaultFont} -size 15")
        self.run_evaluate.configure(foreground="#000000")
        self.run_evaluate.configure(highlightbackground="#d9d9d9")
        self.run_evaluate.configure(highlightcolor="black")
        self.run_evaluate.configure(justify='left')
        self.run_evaluate.configure(text='''Evaluate''')
        self.run_evaluate.configure(variable=self.che2)

        self.run_primer = tk.Checkbutton(self.top)
        self.run_primer.place(relx=0.663, rely=0.532, relheight=0.069
                , relwidth=0.165)
        self.run_primer.configure(activebackground="#ececec")
        self.run_primer.configure(activeforeground="#000000")
        self.run_primer.configure(background="#edf0f0")
        self.run_primer.configure(disabledforeground="#a3a3a3")
        self.run_primer.configure(font="-family {TkDefaultFont} -size 15")
        self.run_primer.configure(foreground="#000000")
        self.run_primer.configure(highlightbackground="#d9d9d9")
        self.run_primer.configure(highlightcolor="black")
        self.run_primer.configure(justify='left')
        self.run_primer.configure(text='''Primer''')
        self.run_primer.configure(variable=self.che3)

        self.run = tk.Button(self.top)
        self.run.place(relx=0.388, rely=0.712, height=40, width=180)
        self.run.configure(activebackground="#ffffff")
        self.run.configure(activeforeground="#000000")
        self.run.configure(background="#edf0f0")
        self.run.configure(borderwidth="1")
        self.run.configure(disabledforeground="#a3a3a3")
        self.run.configure(font="-family {TkDefaultFont} -size 15")
        self.run.configure(foreground="#000000")
        self.run.configure(highlightbackground="#d9d9d9")
        self.run.configure(highlightcolor="black")
        self.run.configure(pady="0")
        self.run.configure(text='''Run''')

        self.help_b = tk.Button(self.top)
        self.help_b.place(relx=0.913, rely=0.067, height=40, width=40)
        self.help_b.configure(activebackground="#ececec")
        self.help_b.configure(activeforeground="#000000")
        self.help_b.configure(background="#d9d9d9")
        self.help_b.configure(borderwidth="1")
        self.help_b.configure(command=ui_support.run_help)
        self.help_b.configure(cursor="fleur")
        self.help_b.configure(disabledforeground="#a3a3a3")
        self.help_b.configure(foreground="#000000")
        self.help_b.configure(highlightbackground="#d9d9d9")
        self.help_b.configure(highlightcolor="black")
        photo_location = "./button4.png"
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        self.help_b.configure(image=_img0)
        self.help_b.configure(pady="0")
        self.help_b.configure(text='''Button''')

        self.gb2fasta_b = tk.Button(self.top)
        self.gb2fasta_b.place(relx=0.188, rely=0.288, height=100, width=100)
        self.gb2fasta_b.configure(activebackground="#ececec")
        self.gb2fasta_b.configure(activeforeground="#000000")
        self.gb2fasta_b.configure(background="#d9d9d9")
        self.gb2fasta_b.configure(borderwidth="0")
        self.gb2fasta_b.configure(command=ui_support.run_gb2fasta)
        self.gb2fasta_b.configure(disabledforeground="#a3a3a3")
        self.gb2fasta_b.configure(foreground="#000000")
        self.gb2fasta_b.configure(highlightbackground="#d9d9d9")
        self.gb2fasta_b.configure(highlightcolor="black")
        photo_location = "./button1.png"
        global _img1
        _img1 = tk.PhotoImage(file=photo_location)
        self.gb2fasta_b.configure(image=_img1)
        self.gb2fasta_b.configure(pady="0")
        self.gb2fasta_b.configure(text='''Button''')

        self.evaluate_b = tk.Button(self.top)
        self.evaluate_b.place(relx=0.438, rely=0.288, height=100, width=100)
        self.evaluate_b.configure(activebackground="#ececec")
        self.evaluate_b.configure(activeforeground="#000000")
        self.evaluate_b.configure(background="#d9d9d9")
        self.evaluate_b.configure(borderwidth="0")
        self.evaluate_b.configure(command=ui_support.run_evaluate)
        self.evaluate_b.configure(disabledforeground="#a3a3a3")
        self.evaluate_b.configure(foreground="#000000")
        self.evaluate_b.configure(highlightbackground="#d9d9d9")
        self.evaluate_b.configure(highlightcolor="black")
        photo_location = "./button2.png"
        global _img2
        _img2 = tk.PhotoImage(file=photo_location)
        self.evaluate_b.configure(image=_img2)
        self.evaluate_b.configure(pady="0")
        self.evaluate_b.configure(text='''Button''')

        self.primer_b = tk.Button(self.top)
        self.primer_b.place(relx=0.688, rely=0.288, height=100, width=100)
        self.primer_b.configure(activebackground="#ececec")
        self.primer_b.configure(activeforeground="#000000")
        self.primer_b.configure(background="#d9d9d9")
        self.primer_b.configure(borderwidth="0")
        self.primer_b.configure(command=ui_support.run_primer)
        self.primer_b.configure(cursor="fleur")
        self.primer_b.configure(disabledforeground="#a3a3a3")
        self.primer_b.configure(foreground="#000000")
        self.primer_b.configure(highlightbackground="#d9d9d9")
        self.primer_b.configure(highlightcolor="black")
        photo_location = "./button3.png"
        global _img3
        _img3 = tk.PhotoImage(file=photo_location)
        self.primer_b.configure(image=_img3)
        self.primer_b.configure(pady="0")
        self.primer_b.configure(text='''Button''')

class gb2fasta:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        _tabfg1 = 'black' 
        _tabfg2 = 'black' 
        _tabbg1 = 'grey75' 
        _tabbg2 = 'grey89' 
        _bgmode = 'light' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("800x601+1246+501")
        top.minsize(120, 1)
        top.maxsize(2564, 1421)
        top.resizable(1,  1)
        top.title("GB2Fasta")
        top.configure(background="#edf0f3")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.top = top
        self.che48 = tk.IntVar()

        self.Scrolledwindow1 = ScrolledWindow(self.top)
        self.Scrolledwindow1.place(relx=0.038, rely=0.083, relheight=0.662
                , relwidth=0.906)
        self.Scrolledwindow1.configure(background="white")
        self.Scrolledwindow1.configure(borderwidth="2")
        self.Scrolledwindow1.configure(highlightbackground="#d9d9d9")
        self.Scrolledwindow1.configure(highlightcolor="black")
        self.Scrolledwindow1.configure(insertbackground="black")
        self.Scrolledwindow1.configure(relief="groove")
        self.Scrolledwindow1.configure(selectbackground="#c4c4c4")
        self.Scrolledwindow1.configure(selectforeground="black")
        self.color = self.Scrolledwindow1.cget("background")
        self.Scrolledwindow1_f = tk.Frame(self.Scrolledwindow1,
                            background=self.color)
        self.Scrolledwindow1.create_window(0, 0, anchor='nw',
                                           window=self.Scrolledwindow1_f)

        self.Label1 = tk.Label(self.Scrolledwindow1)
        self.Label1.place(relx=0.142, rely=0.102, height=23, width=37)
        self.Label1.configure(anchor='w')
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(compound='left')
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''Label''')

        self.Checkbutton1 = tk.Checkbutton(self.Scrolledwindow1)
        self.Checkbutton1.place(relx=0.156, rely=0.305, relheight=0.069
                , relwidth=0.088)
        self.Checkbutton1.configure(activebackground="#ececec")
        self.Checkbutton1.configure(activeforeground="#000000")
        self.Checkbutton1.configure(anchor='w')
        self.Checkbutton1.configure(background="#d9d9d9")
        self.Checkbutton1.configure(compound='left')
        self.Checkbutton1.configure(disabledforeground="#a3a3a3")
        self.Checkbutton1.configure(foreground="#000000")
        self.Checkbutton1.configure(highlightbackground="#d9d9d9")
        self.Checkbutton1.configure(highlightcolor="black")
        self.Checkbutton1.configure(justify='left')
        self.Checkbutton1.configure(selectcolor="#d9d9d9")
        self.Checkbutton1.configure(text='''Check''')
        self.Checkbutton1.configure(variable=self.che48)

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledWindow(AutoScroll, tk.Canvas):
    '''A standard Tkinter Canvas widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Canvas.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')
def start_up():
    ui_support.main()

if __name__ == '__main__':
    ui_support.main()




